{"version":3,"sources":["file:///E:/skynet_game_server/skynet_black/client/assets/scripts/GameApp.ts"],"names":["_decorator","Component","director","game","sys","NetworkManager","EventManager","GameDataManager","SceneManager","ccclass","property","GameApp","networkManager","eventManager","gameDataManager","sceneManager","config","serverUrl","version","debug","getInstance","instance","onLoad","node","destroy","addPersistRootNode","initializeApp","console","log","platform","initializeManagers","setupAppConfig","registerGlobalEvents","loadLocalData","setServerUrl","frameRate","setupScreenAdapter","isMobile","on","EVENT_SHOW","onGameShow","EVENT_HIDE","onGameHide","window","addEventListener","onGlobalError","bind","onUnhandledRejection","loadFromLocal","error","isConnected","saveToLocal","event","reportError","reason","type","getConfig","url","getVersion","isDebugMode","exitApp","disconnect","cleanup","end","clear","off","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, game, sys } from 'cc';\nimport { NetworkManager } from './network/NetworkManager';\nimport { EventManager } from './managers/EventManager';\nimport { GameDataManager } from './managers/GameDataManager';\nimport { SceneManager } from './managers/SceneManager';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameApp')\nexport class GameApp extends Component {\n    private static instance: GameApp;\n    \n    // 管理器实例\n    private networkManager: NetworkManager;\n    private eventManager: EventManager;\n    private gameDataManager: GameDataManager;\n    private sceneManager: SceneManager;\n    \n    // 应用配置\n    private config = {\n        serverUrl: 'ws://localhost:8888',\n        version: '1.0.0',\n        debug: true\n    };\n    \n    public static getInstance(): GameApp {\n        return GameApp.instance;\n    }\n    \n    onLoad() {\n        // 设置单例\n        if (GameApp.instance) {\n            this.node.destroy();\n            return;\n        }\n        GameApp.instance = this;\n        \n        // 设置为常驻节点\n        director.addPersistRootNode(this.node);\n        \n        // 初始化应用\n        this.initializeApp();\n    }\n    \n    private initializeApp(): void {\n        console.log('=== Farm Game Client Starting ===');\n        console.log('Version:', this.config.version);\n        console.log('Platform:', sys.platform);\n        console.log('Debug Mode:', this.config.debug);\n        \n        // 初始化管理器\n        this.initializeManagers();\n        \n        // 设置应用配置\n        this.setupAppConfig();\n        \n        // 注册全局事件\n        this.registerGlobalEvents();\n        \n        // 加载本地数据\n        this.loadLocalData();\n        \n        console.log('=== Game App Initialized ===');\n    }\n    \n    private initializeManagers(): void {\n        // 按顺序初始化管理器\n        this.eventManager = EventManager.getInstance();\n        this.gameDataManager = GameDataManager.getInstance();\n        this.networkManager = NetworkManager.getInstance();\n        this.sceneManager = SceneManager.getInstance();\n        \n        console.log('All managers initialized');\n    }\n    \n    private setupAppConfig(): void {\n        // 设置网络配置\n        this.networkManager.setServerUrl(this.config.serverUrl);\n        \n        // 设置调试模式\n        if (this.config.debug) {\n            // 启用调试日志\n            console.log('Debug mode enabled');\n        }\n        \n        // 设置游戏帧率\n        game.frameRate = 60;\n        \n        // 设置屏幕适配\n        this.setupScreenAdapter();\n    }\n    \n    private setupScreenAdapter(): void {\n        // 根据平台设置屏幕适配策略\n        if (sys.isMobile) {\n            // 移动端适配\n            console.log('Mobile platform detected');\n        } else {\n            // 桌面端适配\n            console.log('Desktop platform detected');\n        }\n    }\n    \n    private registerGlobalEvents(): void {\n        // 注册应用生命周期事件\n        game.on(game.EVENT_SHOW, this.onGameShow, this);\n        game.on(game.EVENT_HIDE, this.onGameHide, this);\n        \n        // 注册错误处理\n        window.addEventListener('error', this.onGlobalError.bind(this));\n        window.addEventListener('unhandledrejection', this.onUnhandledRejection.bind(this));\n        \n        console.log('Global events registered');\n    }\n    \n    private loadLocalData(): void {\n        try {\n            // 加载本地存储的游戏数据\n            this.gameDataManager.loadFromLocal();\n            console.log('Local data loaded');\n        } catch (error) {\n            console.error('Failed to load local data:', error);\n        }\n    }\n    \n    // 应用生命周期事件\n    private onGameShow(): void {\n        console.log('Game show');\n        \n        // 游戏进入前台时的处理\n        if (this.networkManager.isConnected()) {\n            // 重新开始心跳\n            console.log('Resume network heartbeat');\n        }\n    }\n    \n    private onGameHide(): void {\n        console.log('Game hide');\n        \n        // 游戏进入后台时的处理\n        // 保存游戏数据\n        this.gameDataManager.saveToLocal();\n    }\n    \n    // 错误处理\n    private onGlobalError(event: ErrorEvent): void {\n        console.error('Global error:', event.error);\n        \n        // 可以在这里添加错误上报逻辑\n        this.reportError('GlobalError', event.error);\n    }\n    \n    private onUnhandledRejection(event: PromiseRejectionEvent): void {\n        console.error('Unhandled promise rejection:', event.reason);\n        \n        // 可以在这里添加错误上报逻辑\n        this.reportError('UnhandledRejection', event.reason);\n    }\n    \n    private reportError(type: string, error: any): void {\n        // TODO: 实现错误上报\n        console.log('Report error:', type, error);\n    }\n    \n    // 公共方法\n    public getConfig(): any {\n        return this.config;\n    }\n    \n    public setServerUrl(url: string): void {\n        this.config.serverUrl = url;\n        this.networkManager.setServerUrl(url);\n    }\n    \n    public getVersion(): string {\n        return this.config.version;\n    }\n    \n    public isDebugMode(): boolean {\n        return this.config.debug;\n    }\n    \n    // 应用退出\n    public exitApp(): void {\n        console.log('Exiting application...');\n        \n        // 保存数据\n        this.gameDataManager.saveToLocal();\n        \n        // 断开网络连接\n        this.networkManager.disconnect();\n        \n        // 清理资源\n        this.cleanup();\n        \n        // 退出游戏\n        game.end();\n    }\n    \n    private cleanup(): void {\n        // 清理管理器\n        this.eventManager.clear();\n        \n        // 移除全局事件监听\n        game.off(game.EVENT_SHOW, this.onGameShow, this);\n        game.off(game.EVENT_HIDE, this.onGameHide, this);\n        \n        console.log('Application cleanup completed');\n    }\n    \n    onDestroy() {\n        this.cleanup();\n    }\n}\n"]}