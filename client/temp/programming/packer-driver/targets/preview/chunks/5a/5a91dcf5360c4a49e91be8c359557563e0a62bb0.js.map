{"version":3,"sources":["file:///E:/skynet_game_server/skynet_black/client/assets/scripts/managers/SceneManager.ts"],"names":["_decorator","director","EventManager","ccclass","SceneName","SceneEvent","SceneManager","getInstance","instance","constructor","eventManager","currentScene","isLoading","loadScene","sceneName","onProgress","Promise","resolve","reject","Error","emit","SCENE_LOADING","console","log","error","SCENE_LOADED","preloadScene","completedCount","totalCount","item","progress","gotoLoginScene","LOGIN","gotoGameScene","GAME","gotoLoadingScene","LOADING","getCurrentScene","isSceneLoading","reloadCurrentScene"],"mappings":"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","sourcesContent":["import { _decorator, director, Scene } from 'cc';\nimport { EventManager } from './EventManager';\n\nconst { ccclass } = _decorator;\n\nexport enum SceneName {\n    LOGIN = 'LoginScene',\n    GAME = 'GameScene',\n    LOADING = 'LoadingScene'\n}\n\nexport enum SceneEvent {\n    SCENE_LOADING = 'scene_loading',\n    SCENE_LOADED = 'scene_loaded',\n    SCENE_LAUNCH_FINISHED = 'scene_launch_finished'\n}\n\n@ccclass('SceneManager')\nexport class SceneManager {\n    private static instance: SceneManager;\n    private eventManager: EventManager;\n    private currentScene: string = '';\n    private isLoading: boolean = false;\n    \n    public static getInstance(): SceneManager {\n        if (!SceneManager.instance) {\n            SceneManager.instance = new SceneManager();\n        }\n        return SceneManager.instance;\n    }\n    \n    private constructor() {\n        this.eventManager = EventManager.getInstance();\n    }\n    \n    // 加载场景\n    public loadScene(sceneName: SceneName, onProgress?: (progress: number) => void): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.isLoading) {\n                reject(new Error('Scene is already loading'));\n                return;\n            }\n            \n            if (this.currentScene === sceneName) {\n                resolve();\n                return;\n            }\n            \n            this.isLoading = true;\n            this.eventManager.emit(SceneEvent.SCENE_LOADING, sceneName);\n            \n            console.log(`Loading scene: ${sceneName}`);\n            \n            director.loadScene(sceneName, (error: Error | null) => {\n                this.isLoading = false;\n                \n                if (error) {\n                    console.error(`Failed to load scene ${sceneName}:`, error);\n                    reject(error);\n                } else {\n                    console.log(`Scene loaded: ${sceneName}`);\n                    this.currentScene = sceneName;\n                    this.eventManager.emit(SceneEvent.SCENE_LOADED, sceneName);\n                    resolve();\n                }\n            });\n        });\n    }\n    \n    // 预加载场景\n    public preloadScene(sceneName: SceneName, onProgress?: (progress: number) => void): Promise<void> {\n        return new Promise((resolve, reject) => {\n            console.log(`Preloading scene: ${sceneName}`);\n            \n            director.preloadScene(sceneName, (completedCount: number, totalCount: number, item: any) => {\n                const progress = completedCount / totalCount;\n                if (onProgress) {\n                    onProgress(progress);\n                }\n            }, (error: Error | null) => {\n                if (error) {\n                    console.error(`Failed to preload scene ${sceneName}:`, error);\n                    reject(error);\n                } else {\n                    console.log(`Scene preloaded: ${sceneName}`);\n                    resolve();\n                }\n            });\n        });\n    }\n    \n    // 切换到登录场景\n    public gotoLoginScene(): Promise<void> {\n        return this.loadScene(SceneName.LOGIN);\n    }\n    \n    // 切换到游戏场景\n    public gotoGameScene(): Promise<void> {\n        return this.loadScene(SceneName.GAME);\n    }\n    \n    // 切换到加载场景\n    public gotoLoadingScene(): Promise<void> {\n        return this.loadScene(SceneName.LOADING);\n    }\n    \n    // 获取当前场景名称\n    public getCurrentScene(): string {\n        return this.currentScene;\n    }\n    \n    // 是否正在加载\n    public isSceneLoading(): boolean {\n        return this.isLoading;\n    }\n    \n    // 重新加载当前场景\n    public reloadCurrentScene(): Promise<void> {\n        if (!this.currentScene) {\n            return Promise.reject(new Error('No current scene to reload'));\n        }\n        \n        const sceneName = this.currentScene as SceneName;\n        this.currentScene = '';\n        return this.loadScene(sceneName);\n    }\n}\n"]}