{"version":3,"sources":["file:///E:/skynet_game_server/skynet_black/client/assets/scripts/network/NetworkManager.ts"],"names":["_decorator","ProtocolManager","EventManager","ccclass","property","NetworkEvent","ConnectionState","NetworkManager","getInstance","instance","constructor","websocket","protocolManager","eventManager","serverUrl","connectionState","DISCONNECTED","reconnectAttempts","maxReconnectAttempts","reconnectDelay","messageQueue","sequenceNumber","pendingRequests","Map","heartbeatInterval","heartbeatTimeout","lastHeartbeatTime","setServerUrl","url","connect","Promise","resolve","reject","CONNECTED","CONNECTING","Error","console","log","WebSocket","binaryType","onopen","startHeartbeat","processMessageQueue","emit","onclose","event","code","reason","handleDisconnection","onerror","error","ERROR","onmessage","handleMessage","Uint8Array","data","disconnect","stopHeartbeat","close","clear","sendMessage","cmd","seq","wrapper","encodeWrapper","send","push","sendRequest","timeout","timeoutId","setTimeout","delete","set","response","decodeResponse","handleHeartbeatResponse","pendingRequest","get","clearTimeout","message","MESSAGE_RECEIVED","reconnect","RECONNECTING","catch","length","shift","setInterval","heartbeatData","encodeHeartbeatRequest","Date","now","warn","clearInterval","latency","getConnectionState","isConnected"],"mappings":"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","sourcesContent":["import { _decorator, Component, director } from 'cc';\nimport { ProtocolManager } from '../protocol/ProtocolManager';\nimport { EventManager } from '../managers/EventManager';\n\nconst { ccclass, property } = _decorator;\n\nexport enum NetworkEvent {\n    CONNECTED = 'network_connected',\n    DISCONNECTED = 'network_disconnected',\n    RECONNECTING = 'network_reconnecting',\n    ERROR = 'network_error',\n    MESSAGE_RECEIVED = 'network_message_received'\n}\n\nexport enum ConnectionState {\n    DISCONNECTED = 0,\n    CONNECTING = 1,\n    CONNECTED = 2,\n    RECONNECTING = 3\n}\n\n@ccclass('NetworkManager')\nexport class NetworkManager {\n    private static instance: NetworkManager;\n    \n    private websocket: WebSocket | null = null;\n    private protocolManager: ProtocolManager;\n    private eventManager: EventManager;\n    \n    // 连接配置\n    private serverUrl: string = 'ws://localhost:8888';\n    private connectionState: ConnectionState = ConnectionState.DISCONNECTED;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = 5;\n    private reconnectDelay: number = 3000;\n    \n    // 消息队列\n    private messageQueue: Uint8Array[] = [];\n    private sequenceNumber: number = 1;\n    private pendingRequests: Map<number, any> = new Map();\n    \n    // 心跳\n    private heartbeatInterval: number | null = null;\n    private heartbeatTimeout: number | null = null;\n    private lastHeartbeatTime: number = 0;\n    \n    public static getInstance(): NetworkManager {\n        if (!NetworkManager.instance) {\n            NetworkManager.instance = new NetworkManager();\n        }\n        return NetworkManager.instance;\n    }\n    \n    private constructor() {\n        this.protocolManager = ProtocolManager.getInstance();\n        this.eventManager = EventManager.getInstance();\n    }\n    \n    // 设置服务器地址\n    public setServerUrl(url: string): void {\n        this.serverUrl = url;\n    }\n    \n    // 连接服务器\n    public connect(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.connectionState === ConnectionState.CONNECTED) {\n                resolve();\n                return;\n            }\n            \n            if (this.connectionState === ConnectionState.CONNECTING) {\n                reject(new Error('Already connecting'));\n                return;\n            }\n            \n            this.connectionState = ConnectionState.CONNECTING;\n            console.log('Connecting to server:', this.serverUrl);\n            \n            try {\n                this.websocket = new WebSocket(this.serverUrl);\n                this.websocket.binaryType = 'arraybuffer';\n                \n                this.websocket.onopen = () => {\n                    console.log('WebSocket connected');\n                    this.connectionState = ConnectionState.CONNECTED;\n                    this.reconnectAttempts = 0;\n                    this.startHeartbeat();\n                    this.processMessageQueue();\n                    this.eventManager.emit(NetworkEvent.CONNECTED);\n                    resolve();\n                };\n                \n                this.websocket.onclose = (event) => {\n                    console.log('WebSocket closed:', event.code, event.reason);\n                    this.handleDisconnection();\n                };\n                \n                this.websocket.onerror = (error) => {\n                    console.error('WebSocket error:', error);\n                    this.connectionState = ConnectionState.DISCONNECTED;\n                    this.eventManager.emit(NetworkEvent.ERROR, error);\n                    reject(error);\n                };\n                \n                this.websocket.onmessage = (event) => {\n                    this.handleMessage(new Uint8Array(event.data));\n                };\n                \n            } catch (error) {\n                this.connectionState = ConnectionState.DISCONNECTED;\n                reject(error);\n            }\n        });\n    }\n    \n    // 断开连接\n    public disconnect(): void {\n        this.connectionState = ConnectionState.DISCONNECTED;\n        this.stopHeartbeat();\n        \n        if (this.websocket) {\n            this.websocket.close();\n            this.websocket = null;\n        }\n        \n        this.pendingRequests.clear();\n        this.eventManager.emit(NetworkEvent.DISCONNECTED);\n    }\n    \n    // 发送消息\n    public sendMessage(cmd: number, data: Uint8Array): number {\n        const seq = this.sequenceNumber++;\n        const wrapper = this.protocolManager.encodeWrapper(cmd, seq, data);\n        \n        if (this.connectionState === ConnectionState.CONNECTED && this.websocket) {\n            this.websocket.send(wrapper);\n        } else {\n            // 连接断开时加入队列\n            this.messageQueue.push(wrapper);\n        }\n        \n        return seq;\n    }\n    \n    // 发送请求并等待响应\n    public sendRequest(cmd: number, data: Uint8Array, timeout: number = 10000): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const seq = this.sendMessage(cmd, data);\n            \n            const timeoutId = setTimeout(() => {\n                this.pendingRequests.delete(seq);\n                reject(new Error('Request timeout'));\n            }, timeout);\n            \n            this.pendingRequests.set(seq, {\n                resolve,\n                reject,\n                timeoutId,\n                cmd\n            });\n        });\n    }\n    \n    // 处理接收到的消息\n    private handleMessage(data: Uint8Array): void {\n        try {\n            const response = this.protocolManager.decodeResponse(data);\n            \n            // 处理心跳响应\n            if (response.cmd === 0) { // CMD_HEARTBEAT\n                this.handleHeartbeatResponse(response);\n                return;\n            }\n            \n            // 处理请求响应\n            const pendingRequest = this.pendingRequests.get(response.seq);\n            if (pendingRequest) {\n                clearTimeout(pendingRequest.timeoutId);\n                this.pendingRequests.delete(response.seq);\n                \n                if (response.code === 0) {\n                    pendingRequest.resolve(response);\n                } else {\n                    pendingRequest.reject(new Error(response.message || 'Server error'));\n                }\n                return;\n            }\n            \n            // 处理推送消息\n            this.eventManager.emit(NetworkEvent.MESSAGE_RECEIVED, response);\n            \n        } catch (error) {\n            console.error('Failed to handle message:', error);\n        }\n    }\n    \n    // 处理断线\n    private handleDisconnection(): void {\n        this.connectionState = ConnectionState.DISCONNECTED;\n        this.stopHeartbeat();\n        \n        if (this.websocket) {\n            this.websocket = null;\n        }\n        \n        this.eventManager.emit(NetworkEvent.DISCONNECTED);\n        \n        // 自动重连\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnect();\n        }\n    }\n    \n    // 重连\n    private reconnect(): void {\n        if (this.connectionState === ConnectionState.RECONNECTING) {\n            return;\n        }\n        \n        this.connectionState = ConnectionState.RECONNECTING;\n        this.reconnectAttempts++;\n        \n        console.log(`Reconnecting... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.eventManager.emit(NetworkEvent.RECONNECTING, this.reconnectAttempts);\n        \n        setTimeout(() => {\n            this.connect().catch((error) => {\n                console.error('Reconnect failed:', error);\n                if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n                    console.error('Max reconnect attempts reached');\n                    this.eventManager.emit(NetworkEvent.ERROR, new Error('Max reconnect attempts reached'));\n                }\n            });\n        }, this.reconnectDelay);\n    }\n    \n    // 处理消息队列\n    private processMessageQueue(): void {\n        while (this.messageQueue.length > 0 && this.connectionState === ConnectionState.CONNECTED) {\n            const message = this.messageQueue.shift();\n            if (message && this.websocket) {\n                this.websocket.send(message);\n            }\n        }\n    }\n    \n    // 开始心跳\n    private startHeartbeat(): void {\n        this.stopHeartbeat();\n        \n        this.heartbeatInterval = setInterval(() => {\n            if (this.connectionState === ConnectionState.CONNECTED) {\n                const heartbeatData = this.protocolManager.encodeHeartbeatRequest();\n                this.sendMessage(0, heartbeatData); // CMD_HEARTBEAT\n                this.lastHeartbeatTime = Date.now();\n                \n                // 设置心跳超时\n                this.heartbeatTimeout = setTimeout(() => {\n                    console.warn('Heartbeat timeout');\n                    this.handleDisconnection();\n                }, 10000);\n            }\n        }, 30000); // 30秒心跳间隔\n    }\n    \n    // 停止心跳\n    private stopHeartbeat(): void {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n        \n        if (this.heartbeatTimeout) {\n            clearTimeout(this.heartbeatTimeout);\n            this.heartbeatTimeout = null;\n        }\n    }\n    \n    // 处理心跳响应\n    private handleHeartbeatResponse(response: any): void {\n        if (this.heartbeatTimeout) {\n            clearTimeout(this.heartbeatTimeout);\n            this.heartbeatTimeout = null;\n        }\n        \n        const latency = Date.now() - this.lastHeartbeatTime;\n        console.log(`Heartbeat response received, latency: ${latency}ms`);\n    }\n    \n    // 获取连接状态\n    public getConnectionState(): ConnectionState {\n        return this.connectionState;\n    }\n    \n    // 是否已连接\n    public isConnected(): boolean {\n        return this.connectionState === ConnectionState.CONNECTED;\n    }\n}\n"]}