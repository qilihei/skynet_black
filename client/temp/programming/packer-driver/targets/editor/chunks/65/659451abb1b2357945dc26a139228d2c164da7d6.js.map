{"version":3,"sources":["file:///E:/skynet_game_server/skynet_black/client/assets/scripts/scenes/LoginScene.ts"],"names":["_decorator","Component","Node","EditBox","Button","Label","NetworkManager","NetworkEvent","ConnectionState","ProtocolManager","EventManager","GameDataManager","SceneManager","ccclass","property","LoginScene","networkManager","protocolManager","eventManager","gameDataManager","sceneManager","isLoggingIn","onLoad","getInstance","versionLabel","string","setServerUrl","registerEventListeners","setupButtons","updateUIState","loadLoginInfo","onDestroy","off","CONNECTED","DISCONNECTED","RECONNECTING","ERROR","on","onNetworkConnected","onNetworkDisconnected","onNetworkReconnecting","onNetworkError","connectButton","node","EventType","CLICK","onConnectButtonClick","loginButton","onLoginButtonClick","connectionState","getConnectionState","isConnected","interactable","connectLabel","getComponentInChildren","CONNECTING","loginLabel","usernameInput","enabled","passwordInput","loadingNode","active","updateStatusLabel","message","isError","statusLabel","console","log","disconnect","connectToServer","connect","error","username","trim","password","login","loginData","encodeLoginRequest","cmdId","getCommandId","response","sendRequest","code","loginResponse","decodeLoginResponse","data","setSessionToken","session_token","setPlayerData","player_info","saveLoginInfo","setTimeout","enterGame","gotoGameScene","localStorage","setItem","lastUsername","getItem","attempts"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EditBox, Button, Label, director } from 'cc';\nimport { NetworkManager, NetworkEvent, ConnectionState } from '../network/NetworkManager';\nimport { ProtocolManager } from '../protocol/ProtocolManager';\nimport { EventManager } from '../managers/EventManager';\nimport { GameDataManager } from '../managers/GameDataManager';\nimport { SceneManager, SceneName } from '../managers/SceneManager';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('LoginScene')\nexport class LoginScene extends Component {\n    @property(EditBox)\n    usernameInput: EditBox = null!;\n    \n    @property(EditBox)\n    passwordInput: EditBox = null!;\n    \n    @property(Button)\n    loginButton: Button = null!;\n    \n    @property(Button)\n    connectButton: Button = null!;\n    \n    @property(Label)\n    statusLabel: Label = null!;\n    \n    @property(Label)\n    versionLabel: Label = null!;\n    \n    @property(Node)\n    loadingNode: Node = null!;\n    \n    private networkManager: NetworkManager;\n    private protocolManager: ProtocolManager;\n    private eventManager: EventManager;\n    private gameDataManager: GameDataManager;\n    private sceneManager: SceneManager;\n    \n    private isLoggingIn: boolean = false;\n    \n    onLoad() {\n        // 获取管理器实例\n        this.networkManager = NetworkManager.getInstance();\n        this.protocolManager = ProtocolManager.getInstance();\n        this.eventManager = EventManager.getInstance();\n        this.gameDataManager = GameDataManager.getInstance();\n        this.sceneManager = SceneManager.getInstance();\n        \n        // 设置版本信息\n        if (this.versionLabel) {\n            this.versionLabel.string = 'v1.0.0';\n        }\n        \n        // 设置默认服务器地址\n        this.networkManager.setServerUrl('ws://localhost:8888');\n        \n        // 注册事件监听\n        this.registerEventListeners();\n        \n        // 设置按钮事件\n        this.setupButtons();\n        \n        // 初始化UI状态\n        this.updateUIState();\n        \n        // 尝试从本地存储恢复登录信息\n        this.loadLoginInfo();\n    }\n    \n    onDestroy() {\n        // 移除事件监听\n        this.eventManager.off(NetworkEvent.CONNECTED);\n        this.eventManager.off(NetworkEvent.DISCONNECTED);\n        this.eventManager.off(NetworkEvent.RECONNECTING);\n        this.eventManager.off(NetworkEvent.ERROR);\n    }\n    \n    private registerEventListeners(): void {\n        // 网络连接事件\n        this.eventManager.on(NetworkEvent.CONNECTED, this.onNetworkConnected, this);\n        this.eventManager.on(NetworkEvent.DISCONNECTED, this.onNetworkDisconnected, this);\n        this.eventManager.on(NetworkEvent.RECONNECTING, this.onNetworkReconnecting, this);\n        this.eventManager.on(NetworkEvent.ERROR, this.onNetworkError, this);\n    }\n    \n    private setupButtons(): void {\n        if (this.connectButton) {\n            this.connectButton.node.on(Button.EventType.CLICK, this.onConnectButtonClick, this);\n        }\n        \n        if (this.loginButton) {\n            this.loginButton.node.on(Button.EventType.CLICK, this.onLoginButtonClick, this);\n        }\n    }\n    \n    private updateUIState(): void {\n        const connectionState = this.networkManager.getConnectionState();\n        const isConnected = connectionState === ConnectionState.CONNECTED;\n        \n        // 更新按钮状态\n        if (this.connectButton) {\n            this.connectButton.interactable = !this.isLoggingIn;\n            const connectLabel = this.connectButton.getComponentInChildren(Label);\n            if (connectLabel) {\n                switch (connectionState) {\n                    case ConnectionState.DISCONNECTED:\n                        connectLabel.string = '连接服务器';\n                        break;\n                    case ConnectionState.CONNECTING:\n                        connectLabel.string = '连接中...';\n                        break;\n                    case ConnectionState.CONNECTED:\n                        connectLabel.string = '已连接';\n                        break;\n                    case ConnectionState.RECONNECTING:\n                        connectLabel.string = '重连中...';\n                        break;\n                }\n            }\n        }\n        \n        if (this.loginButton) {\n            this.loginButton.interactable = isConnected && !this.isLoggingIn;\n            const loginLabel = this.loginButton.getComponentInChildren(Label);\n            if (loginLabel) {\n                loginLabel.string = this.isLoggingIn ? '登录中...' : '登录';\n            }\n        }\n        \n        // 更新输入框状态\n        if (this.usernameInput) {\n            this.usernameInput.enabled = !this.isLoggingIn;\n        }\n        if (this.passwordInput) {\n            this.passwordInput.enabled = !this.isLoggingIn;\n        }\n        \n        // 更新加载动画\n        if (this.loadingNode) {\n            this.loadingNode.active = this.isLoggingIn;\n        }\n    }\n    \n    private updateStatusLabel(message: string, isError: boolean = false): void {\n        if (this.statusLabel) {\n            this.statusLabel.string = message;\n            // 可以根据isError设置不同的颜色\n        }\n        console.log('Status:', message);\n    }\n    \n    private onConnectButtonClick(): void {\n        if (this.networkManager.isConnected()) {\n            this.networkManager.disconnect();\n        } else {\n            this.connectToServer();\n        }\n    }\n    \n    private async connectToServer(): Promise<void> {\n        this.updateStatusLabel('正在连接服务器...');\n        \n        try {\n            await this.networkManager.connect();\n            this.updateStatusLabel('服务器连接成功');\n        } catch (error) {\n            this.updateStatusLabel('连接服务器失败: ' + error.message, true);\n        }\n    }\n    \n    private onLoginButtonClick(): void {\n        if (!this.networkManager.isConnected()) {\n            this.updateStatusLabel('请先连接服务器', true);\n            return;\n        }\n        \n        const username = this.usernameInput?.string?.trim();\n        const password = this.passwordInput?.string?.trim();\n        \n        if (!username || !password) {\n            this.updateStatusLabel('请输入用户名和密码', true);\n            return;\n        }\n        \n        this.login(username, password);\n    }\n    \n    private async login(username: string, password: string): Promise<void> {\n        this.isLoggingIn = true;\n        this.updateUIState();\n        this.updateStatusLabel('正在登录...');\n        \n        try {\n            // 编码登录请求\n            const loginData = this.protocolManager.encodeLoginRequest(username, password);\n            const cmdId = this.protocolManager.getCommandId('LOGIN_REQUEST');\n            \n            // 发送登录请求\n            const response = await this.networkManager.sendRequest(cmdId, loginData, 10000);\n            \n            if (response.code === 0) {\n                // 登录成功\n                const loginResponse = this.protocolManager.decodeLoginResponse(response.data);\n                \n                // 保存登录数据\n                this.gameDataManager.setSessionToken(loginResponse.session_token);\n                this.gameDataManager.setPlayerData(loginResponse.player_info);\n                \n                // 保存登录信息到本地\n                this.saveLoginInfo(username);\n                \n                this.updateStatusLabel('登录成功，正在进入游戏...');\n                \n                // 延迟一下再跳转，让用户看到成功消息\n                setTimeout(() => {\n                    this.enterGame();\n                }, 1000);\n                \n            } else {\n                this.updateStatusLabel('登录失败: ' + response.message, true);\n            }\n            \n        } catch (error) {\n            this.updateStatusLabel('登录失败: ' + error.message, true);\n        } finally {\n            this.isLoggingIn = false;\n            this.updateUIState();\n        }\n    }\n    \n    private async enterGame(): Promise<void> {\n        try {\n            await this.sceneManager.gotoGameScene();\n        } catch (error) {\n            this.updateStatusLabel('进入游戏失败: ' + error.message, true);\n        }\n    }\n    \n    private saveLoginInfo(username: string): void {\n        try {\n            localStorage.setItem('last_username', username);\n        } catch (error) {\n            console.error('Failed to save login info:', error);\n        }\n    }\n    \n    private loadLoginInfo(): void {\n        try {\n            const lastUsername = localStorage.getItem('last_username');\n            if (lastUsername && this.usernameInput) {\n                this.usernameInput.string = lastUsername;\n            }\n        } catch (error) {\n            console.error('Failed to load login info:', error);\n        }\n    }\n    \n    // 网络事件处理\n    private onNetworkConnected(): void {\n        this.updateStatusLabel('服务器连接成功');\n        this.updateUIState();\n    }\n    \n    private onNetworkDisconnected(): void {\n        this.updateStatusLabel('与服务器断开连接', true);\n        this.updateUIState();\n    }\n    \n    private onNetworkReconnecting(attempts: number): void {\n        this.updateStatusLabel(`正在重连... (${attempts}/5)`);\n        this.updateUIState();\n    }\n    \n    private onNetworkError(error: Error): void {\n        this.updateStatusLabel('网络错误: ' + error.message, true);\n        this.updateUIState();\n    }\n}\n"]}