{"version":3,"sources":["file:///E:/skynet_game_server/skynet_black/client/assets/scripts/scenes/GameScene.ts"],"names":["_decorator","Component","Node","Label","Button","Vec3","tween","NetworkManager","NetworkEvent","ProtocolManager","EventManager","GameDataManager","GameDataEvent","SceneManager","ccclass","property","GameScene","networkManager","protocolManager","eventManager","gameDataManager","sceneManager","playerData","onLoad","getInstance","registerEventListeners","setupButtons","checkLoginStatus","initializeGameData","onDestroy","off","PLAYER_DATA_UPDATED","DISCONNECTED","MESSAGE_RECEIVED","on","onPlayerDataUpdated","onNetworkDisconnected","onMessageReceived","logoutButton","node","EventType","CLICK","onLogoutButtonClick","farmButton","onFarmButtonClick","inventoryButton","onInventoryButtonClick","isLoggedIn","updateStatusLabel","setTimeout","gotoLoginScene","isConnected","getPlayerData","updatePlayerUI","requestPlayerInfo","requestFarmInfo","requestInventoryInfo","error","console","message","requestData","encodeGetPlayerInfoRequest","cmdId","getCommandId","response","sendRequest","code","playerInfo","decodeGetPlayerInfoResponse","data","setPlayerData","player_info","log","playerNameLabel","string","name","playerLevelLabel","level","playerGoldLabel","gold","playerEnergyLabel","energy","maxEnergy","playerNode","setPosition","position","x","y","isError","statusLabel","logout","clearAllData","disconnect","cmd","handleAnnouncement","movePlayer","newPosition","to","call","updatePlayerPosition","sendPositionUpdate","start"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, Button, Sprite, Vec3, tween } from 'cc';\nimport { NetworkManager, NetworkEvent } from '../network/NetworkManager';\nimport { ProtocolManager } from '../protocol/ProtocolManager';\nimport { EventManager } from '../managers/EventManager';\nimport { GameDataManager, GameDataEvent, PlayerData } from '../managers/GameDataManager';\nimport { SceneManager } from '../managers/SceneManager';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameScene')\nexport class GameScene extends Component {\n    @property(Label)\n    playerNameLabel: Label = null!;\n    \n    @property(Label)\n    playerLevelLabel: Label = null!;\n    \n    @property(Label)\n    playerGoldLabel: Label = null!;\n    \n    @property(Label)\n    playerEnergyLabel: Label = null!;\n    \n    @property(Button)\n    logoutButton: Button = null!;\n    \n    @property(Button)\n    farmButton: Button = null!;\n    \n    @property(Button)\n    inventoryButton: Button = null!;\n    \n    @property(Node)\n    playerNode: Node = null!;\n    \n    @property(Node)\n    farmArea: Node = null!;\n    \n    @property(Label)\n    statusLabel: Label = null!;\n    \n    private networkManager: NetworkManager;\n    private protocolManager: ProtocolManager;\n    private eventManager: EventManager;\n    private gameDataManager: GameDataManager;\n    private sceneManager: SceneManager;\n    \n    private playerData: PlayerData | null = null;\n    \n    onLoad() {\n        // 获取管理器实例\n        this.networkManager = NetworkManager.getInstance();\n        this.protocolManager = ProtocolManager.getInstance();\n        this.eventManager = EventManager.getInstance();\n        this.gameDataManager = GameDataManager.getInstance();\n        this.sceneManager = SceneManager.getInstance();\n        \n        // 注册事件监听\n        this.registerEventListeners();\n        \n        // 设置按钮事件\n        this.setupButtons();\n        \n        // 检查登录状态\n        this.checkLoginStatus();\n        \n        // 初始化游戏数据\n        this.initializeGameData();\n    }\n    \n    onDestroy() {\n        // 移除事件监听\n        this.eventManager.off(GameDataEvent.PLAYER_DATA_UPDATED);\n        this.eventManager.off(NetworkEvent.DISCONNECTED);\n        this.eventManager.off(NetworkEvent.MESSAGE_RECEIVED);\n    }\n    \n    private registerEventListeners(): void {\n        // 游戏数据事件\n        this.eventManager.on(GameDataEvent.PLAYER_DATA_UPDATED, this.onPlayerDataUpdated, this);\n        \n        // 网络事件\n        this.eventManager.on(NetworkEvent.DISCONNECTED, this.onNetworkDisconnected, this);\n        this.eventManager.on(NetworkEvent.MESSAGE_RECEIVED, this.onMessageReceived, this);\n    }\n    \n    private setupButtons(): void {\n        if (this.logoutButton) {\n            this.logoutButton.node.on(Button.EventType.CLICK, this.onLogoutButtonClick, this);\n        }\n        \n        if (this.farmButton) {\n            this.farmButton.node.on(Button.EventType.CLICK, this.onFarmButtonClick, this);\n        }\n        \n        if (this.inventoryButton) {\n            this.inventoryButton.node.on(Button.EventType.CLICK, this.onInventoryButtonClick, this);\n        }\n    }\n    \n    private checkLoginStatus(): void {\n        if (!this.gameDataManager.isLoggedIn()) {\n            this.updateStatusLabel('未登录，返回登录页面...', true);\n            setTimeout(() => {\n                this.sceneManager.gotoLoginScene();\n            }, 2000);\n            return;\n        }\n        \n        if (!this.networkManager.isConnected()) {\n            this.updateStatusLabel('网络未连接，返回登录页面...', true);\n            setTimeout(() => {\n                this.sceneManager.gotoLoginScene();\n            }, 2000);\n            return;\n        }\n        \n        this.updateStatusLabel('欢迎来到农场游戏！');\n    }\n    \n    private async initializeGameData(): Promise<void> {\n        // 获取玩家数据\n        this.playerData = this.gameDataManager.getPlayerData();\n        if (this.playerData) {\n            this.updatePlayerUI();\n        }\n        \n        // 请求最新的玩家信息\n        try {\n            await this.requestPlayerInfo();\n            await this.requestFarmInfo();\n            await this.requestInventoryInfo();\n        } catch (error) {\n            console.error('Failed to initialize game data:', error);\n            this.updateStatusLabel('获取游戏数据失败: ' + error.message, true);\n        }\n    }\n    \n    private async requestPlayerInfo(): Promise<void> {\n        try {\n            const requestData = this.protocolManager.encodeGetPlayerInfoRequest();\n            const cmdId = this.protocolManager.getCommandId('PLAYER_GET_INFO');\n            \n            const response = await this.networkManager.sendRequest(cmdId, requestData);\n            \n            if (response.code === 0) {\n                const playerInfo = this.protocolManager.decodeGetPlayerInfoResponse(response.data);\n                this.gameDataManager.setPlayerData(playerInfo.player_info);\n            }\n        } catch (error) {\n            console.error('Failed to request player info:', error);\n        }\n    }\n    \n    private async requestFarmInfo(): Promise<void> {\n        try {\n            // TODO: 实现农场信息请求\n            console.log('Requesting farm info...');\n        } catch (error) {\n            console.error('Failed to request farm info:', error);\n        }\n    }\n    \n    private async requestInventoryInfo(): Promise<void> {\n        try {\n            // TODO: 实现背包信息请求\n            console.log('Requesting inventory info...');\n        } catch (error) {\n            console.error('Failed to request inventory info:', error);\n        }\n    }\n    \n    private updatePlayerUI(): void {\n        if (!this.playerData) return;\n        \n        if (this.playerNameLabel) {\n            this.playerNameLabel.string = this.playerData.name;\n        }\n        \n        if (this.playerLevelLabel) {\n            this.playerLevelLabel.string = `等级 ${this.playerData.level}`;\n        }\n        \n        if (this.playerGoldLabel) {\n            this.playerGoldLabel.string = `金币: ${this.playerData.gold}`;\n        }\n        \n        if (this.playerEnergyLabel) {\n            this.playerEnergyLabel.string = `体力: ${this.playerData.energy}/${this.playerData.maxEnergy}`;\n        }\n        \n        // 更新玩家位置\n        if (this.playerNode) {\n            this.playerNode.setPosition(new Vec3(this.playerData.position.x, this.playerData.position.y, 0));\n        }\n    }\n    \n    private updateStatusLabel(message: string, isError: boolean = false): void {\n        if (this.statusLabel) {\n            this.statusLabel.string = message;\n            // 可以根据isError设置不同的颜色\n        }\n        console.log('Status:', message);\n    }\n    \n    private onLogoutButtonClick(): void {\n        this.logout();\n    }\n    \n    private async logout(): Promise<void> {\n        try {\n            this.updateStatusLabel('正在登出...');\n            \n            // 发送登出请求\n            // TODO: 实现登出协议\n            \n            // 清除本地数据\n            this.gameDataManager.clearAllData();\n            \n            // 断开网络连接\n            this.networkManager.disconnect();\n            \n            // 返回登录页面\n            await this.sceneManager.gotoLoginScene();\n            \n        } catch (error) {\n            console.error('Logout failed:', error);\n            this.updateStatusLabel('登出失败: ' + error.message, true);\n        }\n    }\n    \n    private onFarmButtonClick(): void {\n        this.updateStatusLabel('打开农场界面...');\n        // TODO: 实现农场界面\n        console.log('Farm button clicked');\n    }\n    \n    private onInventoryButtonClick(): void {\n        this.updateStatusLabel('打开背包界面...');\n        // TODO: 实现背包界面\n        console.log('Inventory button clicked');\n    }\n    \n    // 事件处理\n    private onPlayerDataUpdated(playerData: PlayerData): void {\n        this.playerData = playerData;\n        this.updatePlayerUI();\n        \n        if (playerData) {\n            this.updateStatusLabel(`欢迎回来，${playerData.name}！`);\n        }\n    }\n    \n    private onNetworkDisconnected(): void {\n        this.updateStatusLabel('网络连接断开，返回登录页面...', true);\n        setTimeout(() => {\n            this.sceneManager.gotoLoginScene();\n        }, 3000);\n    }\n    \n    private onMessageReceived(message: any): void {\n        console.log('Received message:', message);\n        \n        // 处理服务器推送消息\n        switch (message.cmd) {\n            case 1: // CMD_ANNOUNCEMENT\n                this.handleAnnouncement(message);\n                break;\n            default:\n                console.log('Unhandled message:', message);\n                break;\n        }\n    }\n    \n    private handleAnnouncement(message: any): void {\n        // TODO: 处理服务器公告\n        console.log('Server announcement:', message);\n        this.updateStatusLabel('收到服务器公告');\n    }\n    \n    // 玩家移动（示例）\n    public movePlayer(x: number, y: number): void {\n        if (!this.playerNode || !this.playerData) return;\n        \n        const newPosition = new Vec3(x, y, 0);\n        \n        // 播放移动动画\n        tween(this.playerNode)\n            .to(0.5, { position: newPosition })\n            .call(() => {\n                // 更新玩家数据\n                this.gameDataManager.updatePlayerPosition(x, y);\n                \n                // 发送位置更新到服务器\n                this.sendPositionUpdate(x, y);\n            })\n            .start();\n    }\n    \n    private async sendPositionUpdate(x: number, y: number): Promise<void> {\n        try {\n            // TODO: 实现位置更新协议\n            console.log('Sending position update:', x, y);\n        } catch (error) {\n            console.error('Failed to send position update:', error);\n        }\n    }\n}\n"]}